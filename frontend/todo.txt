interceptor:

import { Injectable } from '@angular/core';
import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';
import { Observable, catchError, switchMap, throwError } from 'rxjs';
import { AuthService } from '../services/auth.service';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
    const accessToken = this.authService.getAccessToken();
    if (accessToken) {
      req = req.clone({ setHeaders: { Authorization: `Bearer ${accessToken}` } });
    }

    return next.handle(req).pipe(
      catchError((error: HttpErrorResponse) => {
        if (error.status === 401 && this.authService.getRefreshToken()) {
          return this.authService.refreshToken().pipe(
            switchMap((newTokens) => {
              this.authService.saveTokens(newTokens.accessToken, newTokens.refreshToken);
              req = req.clone({ setHeaders: { Authorization: `Bearer ${newTokens.accessToken}` } });
              return next.handle(req);
            })
          );
        }
        return throwError(() => error);
      })
    );
  }
}









authService:


refreshToken() {
  return this.http.post<{ accessToken: string; refreshToken: string }>('/auth/refresh-token', {
    refreshToken: this.getRefreshToken(),
  }).pipe(
    tap(tokens => this.saveTokens(tokens.accessToken, tokens.refreshToken))
  );
}

saveTokens(accessToken: string, refreshToken: string) {
  localStorage.setItem('access_token', accessToken);
  localStorage.setItem('refresh_token', refreshToken);
}

getAccessToken(): string | null {
  return localStorage.getItem('access_token');
}

getRefreshToken(): string | null {
  return localStorage.getItem('refresh_token');
}
